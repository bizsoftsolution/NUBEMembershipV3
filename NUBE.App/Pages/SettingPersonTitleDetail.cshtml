@inject IPersonTitleRepository PersonTitle

@{
    int i = 1;
    var lst = PersonTitle.Find(x => String.IsNullOrWhiteSpace(SearchText) || x.Name.ToLower().Contains(SearchText.ToLower())).ToList();
}
<div class="container">

    <div class="input-group mb-3">
        <input type="text" class="form-control" bind="@SearchText" placeholder="Search" />
        <div class="input-group-append">
            <button class="btn btn-success" type="submit">Go</button>
        </div>
    </div>

    <div class="d-flex bg-info">
        <div class="p-2 border text-light" style="width:50px">SNo</div>
        <div class="p-2 flex-grow-1 border border-left-0 text-light">
            Person Title <span class="badge badge-light">@lst.Count()</span>
            <button class="btn btn-light text-info float-right btn-sm" onclick="@NewPersonTitle">
                <span class="oi oi-plus " aria-hidden="true"></span> NEW
            </button>
        </div>
    </div>
    <div style="height:250px;overflow:auto" class="border">
        @{

            foreach (var d in lst)
            {
                <div class="d-flex @( i%2==0? "bg-light" : "")">
                    <div class="p-2 border text-right" style="width:50px">@(i++)</div>
                    <div class="p-2 flex-grow-1 border border-left-0">
                        @d.Name

                        <button class="btn btn-danger text-light mr-1 float-right btn-sm " onclick="@(x=> DeletePersonTitle(d))">
                            <i class="material-icons">delete</i>
                        </button>

                        <button class="btn btn-info text-light mr-1 float-right btn-sm" onclick="@( x=> EditPersonTitle(d) )">
                            <i class="material-icons">edit</i>
                        </button>

                    </div>
                </div>
            }
        }
    </div>
</div>
<MsgBox MsgData="@messageBox" />

<Modal IsShow="@IsShowPersonTitleForm">

    <ModalHeader>
        @TitlePersonTitleForm
    </ModalHeader>

    <ModalBody>
        <div class="form-group @(!PersonTitle.IsValidName(data)? "text-danger" : "text-success")">
            <label for="Name">Name : </label>
            <input type="text" class="form-control @(!PersonTitle.IsValidName(data)? "border-danger" : "border-success")" id="Name" bind="@data.Name" />
            <span class="help-block">
                @if (string.IsNullOrWhiteSpace(data.Name))
                {
                    <b>Reuired</b>
                }
                else if (PersonTitle.ExistName(data))
                {
                    <b>Already Exist</b>
                }
            </span>
        </div>

    </ModalBody>

    <ModalFooter>
        <button class="btn btn-success" style="width: 100px" onclick="@SavePersonTitle">Save</button>
        <button class="btn btn-secondary" style="width: 100px" onclick="@CacenlPersonTitle">Cancel</button>
    </ModalFooter>

</Modal>
@functions{
    public MessageBox messageBox { get; set; } = new MessageBox();
    protected override void OnInit()
    {
        messageBox.OnChange += StateHasChanged;
    }

    public string SearchText { get; set; } = "";
    public bool IsShowPersonTitleForm { get; set; } = false;
    public string TitlePersonTitleForm { get; set; } = "PersonTitle";
    public DAL.PersonTitle data { get; set; } = new DAL.PersonTitle();

    void ShowPersonTitleForm()
    {
        IsShowPersonTitleForm = true;
        StateHasChanged();
    }
    void HidePersonTitleForm()
    {
        IsShowPersonTitleForm = false;
        StateHasChanged();
    }

    void NewPersonTitle()
    {
        data = new DAL.PersonTitle();
        ShowPersonTitleForm();
    }
    void EditPersonTitle(DAL.PersonTitle d)
    {
        data = d;
        ShowPersonTitleForm();
    }
    void SavePersonTitle()
    {


        if (PersonTitle.IsValid(data))
        {
            HidePersonTitleForm();
            if (data.Id == 0)
            {
                if (PersonTitle.Create(data))
                {
                    messageBox.ShowMessage(TitlePersonTitleForm, "Created");
                }
                else
                {
                    messageBox.ShowMessage(TitlePersonTitleForm, "Not Created");
                }
            }
            else
            {
                if (PersonTitle.Update(data))
                {
                    messageBox.ShowMessage(TitlePersonTitleForm, "Updated");
                }
                else
                {
                    messageBox.ShowMessage(TitlePersonTitleForm, "Not Updated");
                }
            }
        }
        else
        {

        }

    }
    void DeletePersonTitle(DAL.PersonTitle d)
    {
        if (!PersonTitle.CanDelete(d))
        {
            messageBox.ShowMessage(TitlePersonTitleForm, $"{d.Name} can not Delete. It used to Member");
        }
        else
        {
            messageBox.ShowMessage(TitlePersonTitleForm, $"Are you delete the {d.Name} from PersonTitle?", () =>
            {
                messageBox.HideMessage();
                if (PersonTitle.Delete(d))
                {
                    messageBox.ShowMessage(TitlePersonTitleForm, $"{d.Name} is Deleted");
                }
                else
                {
                    messageBox.ShowMessage(TitlePersonTitleForm, $"{d.Name} is not Deleted");
                }
                return true;
            });
        }

    }
    void CacenlPersonTitle()
    {
        if (data.Id != 0) PersonTitle.Reload(data);
        HidePersonTitleForm();
    }


}