@inject IStateRepository State
@inject ICountryRepository CountryRepository;

@{
    int i = 1;
    var lst = State.FindIncluceCountry(x => String.IsNullOrWhiteSpace(SearchText) || x.Name.ToLower().Contains(SearchText.ToLower())).ToList();
}
<div class="container">

    <div class="input-group mb-3">
        <input type="text" class="form-control" bind="@SearchText" placeholder="Search" />
        <div class="input-group-append">
            <button class="btn btn-success" type="submit">Go</button>
        </div>
    </div>

    <div class="d-flex bg-info">
        <div class="p-2 border text-light" style="width:50px">SNo</div>
        <div class="p-2 border border-left-0 text-light" style="width:150px">Country</div>
        <div class="p-2 flex-grow-1 border border-left-0 text-light">
            State <span class="badge badge-light">@lst.Count()</span>
            <button class="btn btn-light text-info float-right btn-sm" onclick="@NewState">
                <span class="oi oi-plus " aria-hidden="true"></span> NEW
            </button>
        </div>
    </div>
    <div style="height:250px;overflow:auto" class="border">
        @{

            foreach (var d in lst)
            {
        <div class="d-flex @( i%2==0? "bg-light" : "")">
            <div class="p-2 border text-right" style="width:50px">@(i++)</div>
            <div class="p-2 border border-left-0" style="width:150px">@d.Country.Name</div>
            <div class="p-2 flex-grow-1 border border-left-0">
                @d.Name

                <button class="btn btn-danger text-light mr-1 float-right btn-sm" onclick="@(x=> DeleteState(d))">
                    <i class="material-icons">delete</i>
                </button>

                <button class="btn btn-info text-light mr-1 float-right btn-sm" onclick="@( x=> EditState(d) )">
                    <i class="material-icons">edit</i>
                </button>

            </div>
        </div>
            }
        }
    </div>
</div>
<MsgBox MsgData="@messageBox" />

<Modal IsShow="@IsShowStateForm">

    <ModalHeader>
        @TitleStateForm
    </ModalHeader>

    <ModalBody>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Name</span>
            </div>
            <input type="text" class="form-control" bind="@data.Name" />
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Country</span>
            </div>
            <SelectCountry />
            <input list="lstCountry" bind="@CountryName" class="form-control" type="text" />
        </div>

    </ModalBody>

    <ModalFooter>
        <button class="btn btn-success" style="width: 100px" onclick="@SaveState">Save</button>
        <button class="btn btn-secondary" style="width: 100px" onclick="@HideStateForm">Cancel</button>
    </ModalFooter>

</Modal>


@functions{
    public MessageBox messageBox { get; set; } = new MessageBox();
    protected override void OnInit()
    {
        messageBox.OnChange += StateHasChanged;

    }

    public string SearchText { get; set; } = "";
    public bool IsShowStateForm { get; set; } = false;
    public string TitleStateForm { get; set; } = "State";
    public DAL.State data { get; set; } = new DAL.State();

    private string countryName;

    public string  CountryName
    {
        get { return countryName; }
        set
        {
            if(countryName != value)
            {
                countryName = value;
                if (string.IsNullOrWhiteSpace(CountryName))
                {
                    data.CountryId = 0;
                }
                else
                {
                    data.CountryId = CountryRepository.IdByName(CountryName);
                }
                StateHasChanged();
            }
        }
    }


    void ShowStateForm()
    {
        IsShowStateForm = true;
        StateHasChanged();
    }
    void HideStateForm()
    {
        IsShowStateForm = false;
        StateHasChanged();
    }

    void NewState()
    {
        data = new DAL.State();
        CountryName = "";
        ShowStateForm();
    }
    void EditState(DAL.State d)
    {
        data = d;        
        CountryName = d.Country.Name;
        ShowStateForm();
    }
    void SaveState()
    {
        HideStateForm();
        if (data.Id == 0)
        {
            if (State.Create(data))
            {
                messageBox.ShowMessage("State", "Created");
            }
            else
            {
                messageBox.ShowMessage("State", "Not Created");
            }
        }
        else
        {
            if (State.Update(data))
            {
                messageBox.ShowMessage("State", "Updated");
            }
            else
            {
                messageBox.ShowMessage("State", "Not Updated");
            }
        }
    }
    void DeleteState(DAL.State d)
    {
        messageBox.ShowMessage("Delete", $"Are you delete the {d.Name} from State?", () =>
        {
            messageBox.HideMessage();
            if (State.Delete(d))
            {
                messageBox.ShowMessage("Delete", $"{d.Name} is Deleted");
            }
            else
            {
                messageBox.ShowMessage("Delete", $"{d.Name} is not Deleted");
            }
            return true;
        });
    }

}