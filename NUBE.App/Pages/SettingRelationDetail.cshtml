@inject IRelationShipRepository RelationShip

@{
    int i = 1;
    var lst = RelationShip.Find(x => String.IsNullOrWhiteSpace(SearchText) || x.Name.ToLower().Contains(SearchText.ToLower())).ToList();
}
<div class="container">

    <div class="input-group mb-3">
        <input type="text" class="form-control" bind="@SearchText" placeholder="Search" />
        <div class="input-group-append">
            <button class="btn btn-success" type="submit">Go</button>
        </div>
    </div>

    <div class="d-flex bg-info">
        <div class="p-2 border text-light" style="width:50px">SNo</div>
        <div class="p-2 flex-grow-1 border border-left-0 text-light">
            Relation <span class="badge badge-light">@lst.Count()</span>
            <button class="btn btn-light text-info float-right btn-sm" onclick="@NewRelation">
                <span class="oi oi-plus " aria-hidden="true"></span> NEW
            </button>
        </div>
    </div>
    <div style="height:250px;overflow:auto" class="border">
        @{

            foreach (var d in lst)
            {
                <div class="d-flex @( i%2==0? "bg-light" : "")">
                    <div class="p-2 border text-right" style="width:50px">@(i++)</div>
                    <div class="p-2 flex-grow-1 border border-left-0">
                        @d.Name

                        <button class="btn btn-danger text-light mr-1 float-right btn-sm" onclick="@(x=> DeleteRelation(d))">
                            <i class="material-icons">delete</i>
                        </button>

                        <button class="btn btn-info text-light mr-1 float-right btn-sm" onclick="@( x=> EditRelation(d) )">
                            <i class="material-icons">edit</i>
                        </button>

                    </div>
                </div>
            }
        }
    </div>
</div>
<MsgBox MsgData="@messageBox" />

<Modal IsShow="@IsShowRelationForm">
    
    <ModalHeader>
        @TitleRelationForm
    </ModalHeader>

    <ModalBody>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Name</span>
            </div>
            <input type="text" class="form-control" bind="@data.Name" />
        </div>
    </ModalBody>

    <ModalFooter>
        <button class="btn btn-success" style="width: 100px" onclick="@SaveRelation">Save</button>
        <button class="btn btn-secondary" style="width: 100px" onclick="@HideRelationForm">Cancel</button>
    </ModalFooter>

</Modal>
@functions{
    public MessageBox messageBox { get; set; } = new MessageBox();
    protected override void OnInit()
    {
        messageBox.OnChange += StateHasChanged;
    }

    public string SearchText { get; set; } = "";
    public bool IsShowRelationForm { get; set; } = false;
    public string TitleRelationForm { get; set; } = "Relation";
    public DAL.Relationship data { get; set; } = new DAL.Relationship();

    void ShowRelationForm()
    {
        IsShowRelationForm = true;
        StateHasChanged();
    }
    void HideRelationForm()
    {
        IsShowRelationForm = false;
        StateHasChanged();
    }

    void NewRelation()
    {
        data = new DAL.Relationship();
        ShowRelationForm();
    }
    void EditRelation(DAL.Relationship d)
    {
        data = d;
        ShowRelationForm();
    }
    void SaveRelation()
    {
        HideRelationForm();
        if (data.Id == 0)
        {
            if (RelationShip.Create(data))
            {
                messageBox.ShowMessage("Relation", "Created");
            }
            else
            {
                messageBox.ShowMessage("Relation", "Not Created");
            }
        }
        else
        {
            if (RelationShip.Update(data))
            {
                messageBox.ShowMessage("Relation", "Updated");
            }
            else
            {
                messageBox.ShowMessage("Relation", "Not Updated");
            }
        }
    }
    void DeleteRelation(DAL.Relationship d)
    {
        messageBox.ShowMessage("Delete", $"Are you delete the {d.Name} from Relation?", () =>
        {
            messageBox.HideMessage();
            if (RelationShip.Delete(d))
            {
                messageBox.ShowMessage("Delete", $"{d.Name} is Deleted");
            }
            else
            {
                messageBox.ShowMessage("Delete", $"{d.Name} is not Deleted");
            }
            return true;
        });
    }

}